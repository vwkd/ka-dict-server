type Query {
  verb(id: ID!): Entry
  findEntry(value: String!): [Entry]!
}

type Entry {
  id: ID!
  source: Source!
  ...TargetOrReference
}

type Source {
  value: String!
  meaning: Int!
}

type TargetOrReference = TargetPartial | ReferencePartial

type TargetPartial {
  target: [Target!]!
}

type Target {
  meaning: Int!
  value: [String!]!
  tags: [Tag]!
}

type ReferencePartial {
  reference: Reference!
}

type Reference {
  source: Source!
  type: ReferenceType!
  tags: [Tag]!
}

enum ReferenceType {
  DIRECT
  MEANING
  IDENTICAL
}

enum Tag {
  xxx
  ...
}