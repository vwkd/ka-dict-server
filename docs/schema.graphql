type Query {
  verb(id: ID!): Entry
  findEntry(index: String!): [Entry]!
}

type Entry {
  id: ID!
  key: Key!
  ...DefinitionOrReference
}

type Key {
  index: String!
  variant: Int!
}

type DefinitionOrReference = DefinitionPartial | ReferencePartial

type DefinitionPartial {
  definitions: [Definition!]!
}

type Definition {
  variant: Int!
  formulations: [String!]!
  tags: [Tag]!
}

type ReferencePartial {
  reference: Reference!
}

type Reference {
  key: Key!
  type: ReferenceType!
  tags: [Tag]!
}

enum ReferenceType {
  DIRECT
  MEANING
  IDENTICAL
}

enum Tag {
  xxx
  ...
}